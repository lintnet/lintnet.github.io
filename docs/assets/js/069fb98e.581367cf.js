"use strict";(self.webpackChunklintnet=self.webpackChunklintnet||[]).push([[55],{5470:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=t(5893),s=t(1151);const o={sidebar_position:200},a="Lint across files",l={id:"guides/lint-across-files",title:"Lint across files",description:"Basically lintnet lints each data file independently.",source:"@site/docs/guides/lint-across-files.md",sourceDirName:"guides",slug:"/guides/lint-across-files",permalink:"/docs/guides/lint-across-files",draft:!1,unlisted:!1,editUrl:"https://github.com/lintnet/lintnet.github.io/edit/main/docs/guides/lint-across-files.md",tags:[],version:"current",sidebarPosition:200,frontMatter:{sidebar_position:200},sidebar:"tutorialSidebar",previous:{title:"Parameterize lint rules",permalink:"/docs/guides/parameterize-rule"},next:{title:"Customize Outputs",permalink:"/docs/guides/customize-output"}},r={},c=[];function d(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"lint-across-files",children:"Lint across files"}),"\n",(0,i.jsxs)(n.p,{children:["Basically lintnet lints each data file independently.\nBut sometimes you need to lint across files.\nFor example, if you want to check if GitHub Actions workflow names are unique,\nyou need to lint across all GitHub Actions workflow files.\nSo lintnet supports linting across multiple files.\nYou can set ",(0,i.jsx)(n.code,{children:"combine: true"})," in targets."]}),"\n",(0,i.jsx)(n.p,{children:"e.g."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsonnet",children:" targets: [\n    {\n      id: 'github-actions',\n      combine: true, // Lint across multiple files\n      data_files: [\n        '.github/workflows/*.yml',\n        '.github/workflows/*.yaml',\n      ],\n      lint_files: [\n        'github_actions_workflow_name_should_be_unique.jsonnet',\n      ],\n    },\n  ],\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"combine"})," is true, the top level arguments of lint rule is changed.\nInstead of ",(0,i.jsx)(n.code,{children:"param.data"}),", ",(0,i.jsx)(n.code,{children:"param.combined_data"})," are set.\n",(0,i.jsx)(n.code,{children:"param.combined_data"})," is a map whose key is data file path and value is the file data."]})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>a});var i=t(7294);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);