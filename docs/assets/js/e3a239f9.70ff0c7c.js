"use strict";(self.webpackChunklintnet=self.webpackChunklintnet||[]).push([[938],{9339:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>f,frontMatter:()=>l,metadata:()=>c,toc:()=>r});var i=t(5893),s=t(1151);const l={sidebar_position:400},o="Configuration file",c={id:"config-file",title:"Configuration file",description:"lintnet reads a configuration file ^\\.?lintnet\\.jsonnet$ on the current directory.",source:"@site/docs/config-file.md",sourceDirName:".",slug:"/config-file",permalink:"/docs/config-file",draft:!1,unlisted:!1,editUrl:"https://github.com/lintnet/lintnet.github.io/edit/main/docs/config-file.md",tags:[],version:"current",sidebarPosition:400,frontMatter:{sidebar_position:400},sidebar:"tutorialSidebar",previous:{title:"Lint rules",permalink:"/docs/lint-rule"},next:{title:"Test lint rules",permalink:"/docs/test-rule"}},a={},r=[{value:"Top level argument",id:"top-level-argument",level:2},{value:"Glob",id:"glob",level:2},{value:"Lint file&#39;s config parameters",id:"lint-files-config-parameters",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"configuration-file",children:"Configuration file"}),"\n",(0,i.jsxs)(n.p,{children:["lintnet reads a configuration file ",(0,i.jsx)(n.code,{children:"^\\.?lintnet\\.jsonnet$"})," on the current directory.\nYou can also specify the configuration file path by the command line option ",(0,i.jsx)(n.code,{children:"--config (-c)"})," and the environment variable ",(0,i.jsx)(n.code,{children:"LINTNET_CONFIG"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"lintnet -c foo.yaml lint\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can scaffold the configuration file by ",(0,i.jsx)(n.code,{children:"lintnet init"})," command."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"lintnet init\n"})}),"\n",(0,i.jsx)(n.p,{children:"e.g."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsonnet",children:"function(param) {\n  targets: [\n    {\n      data_files: [\n        'examples/**/*.csv',\n      ],\n      lint_files: [\n        'examples/lint/csv.jsonnet',\n        {\n          path: 'examples/lint/filename.jsonnet',\n          config: {\n            excluded: ['foo'],\n          },\n        },\n      ],\n      modules: [\n        'github.com/suzuki-shunsuke/example-lintnet-modules/newline.jsonnet@32ca3be646ec5b5861aab72fed30cd71f6eba9bf:v0.1.2',\n        {\n          path: 'github.com/suzuki-shunsuke/example-lintnet-modules/ghalint.jsonnet@32ca3be646ec5b5861aab72fed30cd71f6eba9bf:v0.1.2',\n          config: {\n            excluded: ['foo'],\n          },\n        },\n      ],\n    },\n  ],\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"top-level-argument",children:"Top level argument"}),"\n",(0,i.jsxs)(n.p,{children:["Now the top level argument ",(0,i.jsx)(n.code,{children:"param"})," is empty. This argument is reserved for future enhancement."]}),"\n",(0,i.jsx)(n.h2,{id:"glob",children:"Glob"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"data_files"})," and ",(0,i.jsx)(n.code,{children:"lint_files"})," are lists of patterns matching with data and lint files.\nEach string is parsed with ",(0,i.jsx)(n.a,{href:"https://github.com/bmatcuk/doublestar",children:"bmatcuk/doublestar"}),".\nIf each string starts with ",(0,i.jsx)(n.code,{children:"!"}),", files matching with the pattern are excluded."]}),"\n",(0,i.jsx)(n.p,{children:"e.g. foo/example.jsonnet is excluded"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"**/*.jsonnet\n!foo/example.jsonnet\n"})}),"\n",(0,i.jsxs)(n.p,{children:["e.g. foo/example.jsonnet isn't excluded because the later pattern ",(0,i.jsx)(n.code,{children:"foo/*.jsonnet"})," takes precedence"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"**/*.jsonnet\n!foo/example.jsonnet\nfoo/*.jsonnet\n"})}),"\n",(0,i.jsx)(n.h2,{id:"lint-files-config-parameters",children:"Lint file's config parameters"}),"\n",(0,i.jsx)(n.p,{children:"Each lint file can take config parameters."}),"\n",(0,i.jsx)(n.p,{children:"e.g."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsonnet",children:"lint_files: [\n  {\n    path: 'examples/lint/filename.jsonnet',\n    config: {\n      excludes: ['foo'],\n    },\n  },\n],\nmodules: [\n  {\n    path: 'github.com/suzuki-shunsuke/example-lintnet-modules/ghalint.jsonnet@32ca3be646ec5b5861aab72fed30cd71f6eba9bf:v0.1.2',\n    config: {\n      excludes: ['foo'],\n    },\n  },\n],\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Each lint file can refer to parameters by ",(0,i.jsx)(n.code,{children:"param.config"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"e.g."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsonnet",children:"local excludes = std.get(param.config, 'excludes', [])\n"})})]})}function f(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>o});var i=t(7294);const s={},l=i.createContext(s);function o(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);