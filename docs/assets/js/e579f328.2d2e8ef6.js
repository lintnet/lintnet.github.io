"use strict";(self.webpackChunklintnet=self.webpackChunklintnet||[]).push([[160],{7623:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>a,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var i=t(5893),r=t(1151);const l={sidebar_position:300},s="Lint rules",d={id:"lint-rule",title:"Lint rules",description:"[!WARNING]",source:"@site/docs/lint-rule.md",sourceDirName:".",slug:"/lint-rule",permalink:"/docs/lint-rule",draft:!1,unlisted:!1,editUrl:"https://github.com/lintnet/lintnet.github.io/edit/main/docs/lint-rule.md",tags:[],version:"current",sidebarPosition:300,frontMatter:{sidebar_position:300},sidebar:"tutorialSidebar",previous:{title:"Supported data format",permalink:"/docs/supported-data-format"},next:{title:"Configuration file",permalink:"/docs/config-file"}},o={},c=[{value:"Location of lint files",id:"location-of-lint-files",level:3},{value:"External Variables",id:"external-variables",level:3},{value:"Native functions",id:"native-functions",level:3},{value:"Format of Jsonnet",id:"format-of-jsonnet",level:3},{value:"Error level",id:"error-level",level:3}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"lint-rules",children:"Lint rules"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"[!WARNING]\nThe specification is unstable yet."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"lintnet uses Jsonnet to write lint rules."}),"\n",(0,i.jsx)(n.h3,{id:"location-of-lint-files",children:"Location of lint files"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"lintnet"})," looks for lint files ",(0,i.jsx)(n.code,{children:"*.jsonnet"})," recursively from the base directory ",(0,i.jsx)(n.code,{children:"lintnet"}),".\nYou can change the base directory with the command line option ",(0,i.jsx)(n.code,{children:"--rule-base-dir (-d)"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["e.g. Change the base directory to ",(0,i.jsx)(n.code,{children:"policy"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"lintnet lint -d policy foo.yaml bar.yaml\n"})}),"\n",(0,i.jsx)(n.h3,{id:"external-variables",children:"External Variables"}),"\n",(0,i.jsxs)(n.p,{children:["The following ",(0,i.jsx)(n.a,{href:"https://jsonnet.org/ref/language.html#external-variables-extvars",children:"External Variables"})," are passed to lint files."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"input"}),": A file content to be linted"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"file_path"}),": A file path to be linted"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"file_type"}),": A file type to be linted. One of ",(0,i.jsx)(n.code,{children:"json"})," and ",(0,i.jsx)(n.code,{children:"yaml"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"file_text"}),": A file content to be linted"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"native-functions",children:"Native functions"}),"\n",(0,i.jsxs)(n.p,{children:["lintnet supports all ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/github.com/google/go-jsonnet#NativeFunction",children:"native functions"})," supported by ",(0,i.jsx)(n.a,{href:"https://github.com/suzuki-shunsuke/go-jsonnet-native-functions",children:"suzuki-shunsuke/go-jsonnet-native-functions"}),", which ports Go standard libraries to Jsonnet.\nThe following native functions are available."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"strings.Contains"}),"\n",(0,i.jsx)(n.li,{children:"strings.TrimPrefix"}),"\n",(0,i.jsx)(n.li,{children:"strings.TrimSpace"}),"\n",(0,i.jsx)(n.li,{children:"regexp.MatchString"}),"\n",(0,i.jsx)(n.li,{children:"filepath.Base"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You can executed these functions by ",(0,i.jsx)(n.code,{children:'std.native("{native function name}")'}),"."]}),"\n",(0,i.jsx)(n.p,{children:"e.g."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsonnet",children:'local contained = std.native("strings.Contains")("hello", "ll"); // true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"format-of-jsonnet",children:"Format of Jsonnet"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"JSONPath"}),(0,i.jsx)(n.th,{children:"type"}),(0,i.jsx)(n.th,{children:"description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".name"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"Rule name"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".description"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"Group description"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".message"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"Error message"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".failed"})}),(0,i.jsx)(n.td,{children:"bool"}),(0,i.jsx)(n.td,{children:"If this is true, this means the file violates the rule"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".level"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"Error level"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".location"})}),(0,i.jsx)(n.td,{children:"`string"}),(0,i.jsx)(n.td,{children:"any`"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".metadata"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"any"})}),(0,i.jsx)(n.td,{children:"Metadata that users can set freely"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"error-level",children:"Error level"}),"\n",(0,i.jsx)(n.p,{children:"lintnet supports the following error levels."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"severity"}),(0,i.jsx)(n.th,{children:"error level"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"debug"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:"info"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"warn"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"4"}),(0,i.jsx)(n.td,{children:"error"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["You can specify the error level by command line option ",(0,i.jsx)(n.code,{children:"--error-level (-e)"})," or the environment variable ",(0,i.jsx)(n.code,{children:"LINTNET_ERROR_LEVEL"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"e.g."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"lintnet lint -e error\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Error level is similar to log level.\nErrors whose error level is lower than the error level of the command are ignored.\nThe default error level is ",(0,i.jsx)(n.code,{children:"info"}),"."]})]})}function a(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>s});var i=t(7294);const r={},l=i.createContext(r);function s(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);