"use strict";(self.webpackChunklintnet=self.webpackChunklintnet||[]).push([[938],{9339:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var i=t(5893),o=t(1151);const l={sidebar_position:400},a="Configuration file",s={id:"config-file",title:"Configuration file",description:"lintnet reads a configuration file ^\\.?lintnet\\.ya?ml$ on the current directory.",source:"@site/docs/config-file.md",sourceDirName:".",slug:"/config-file",permalink:"/docs/config-file",draft:!1,unlisted:!1,editUrl:"https://github.com/lintnet/lintnet.github.io/edit/main/docs/config-file.md",tags:[],version:"current",sidebarPosition:400,frontMatter:{sidebar_position:400},sidebar:"tutorialSidebar",previous:{title:"Lint rules",permalink:"/docs/lint-rule"}},r={},c=[];function p(n){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"configuration-file",children:"Configuration file"}),"\n",(0,i.jsxs)(e.p,{children:["lintnet reads a configuration file ",(0,i.jsx)(e.code,{children:"^\\.?lintnet\\.ya?ml$"})," on the current directory.\nYou can also specify the configuration file path by the command line option ",(0,i.jsx)(e.code,{children:"--config (-c)"})," and the environment variable ",(0,i.jsx)(e.code,{children:"LINTNET_CONFIG"}),"."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sh",children:"lintnet -c foo.yaml lint\n"})}),"\n",(0,i.jsx)(e.p,{children:"e.g."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:'error_level: info\nmodules:\n  - id: toml\n    source: github_content>lintnet/lintnet-example//toml.jsonnet#v0.1.0\n  - id: lintnet/lintnet-example-2\n    source: github_content>lintnet/lintnet-example-2#v0.1.0\n  - id: lintnet/lintnet-example-3\n    source: github_archive>lintnet/lintnet-example-3#v0.1.0\n  - id: yaml\n    source: http>https://example.com/v0.1.0/yaml.jsonnet\ndata_transformation:\n  - id: foo\n    type: jsonnet\n    file: transform.jsonnet\noutputs:\n  - type: stdout # stdout, stderr, file, github issue\n    renderer: jsonnet\n    template: foo.jsonnet\n  - type: file\n    renderer: text/template\n    path: foo.md\n    template: foo.tmpl\ntargets:\n  - lint_files:\n      search_type: equal\n      paths:\n        - path: lintnet/csv.jsonnet\n      # imports:\n      #   - module: lintnet/lintnet-example-2\n      #     path: util.libsonnet\n      #     import: utils.libsonnet # optional\n    data_files:\n      search_type: equal\n      paths:\n        - path: examples/hello.csv\n  # - lint_files:\n  #     module: toml\n  #   data_files:\n  #     search_type: glob\n  #     paths:\n  #       - path: "*.toml"\n  # - lint_files:\n  #     module: lintnet/lintnet-example-2\n  #     search_type: equal\n  #     paths:\n  #       - path: actions.jsonnet\n  #   data_files:\n  #     search_type: glob\n  #     paths:\n  #       - path: .github/workflows/*.yml\n  #       - path: .github/workflows/*.yaml\n  #       - path: .github/workflows/fooyaml\n  #         exclude: true\n  # - lint_files:\n  #     module: lintnet/lintnet-example-3\n  #     paths:\n  #       - path: lintnet/json.jsonnet\n  #   data_files:\n  #     search_type: glob\n  #     paths:\n  #       - path: "*/*.json"\n  # - lint_files:\n  #     module: yaml\n  #   data_files:\n  #     search_type: glob\n  #     paths:\n  #       - path: "*/*.yaml"\n'})})]})}function d(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>s,a:()=>a});var i=t(7294);const o={},l=i.createContext(o);function a(n){const e=i.useContext(l);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),i.createElement(l.Provider,{value:e},n.children)}}}]);