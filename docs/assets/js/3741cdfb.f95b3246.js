"use strict";(globalThis.webpackChunklintnet=globalThis.webpackChunklintnet||[]).push([[633],{3457:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"lint-rule/index","title":"Lint rules","description":"lintnet uses Jsonnet to write lint rules.","source":"@site/docs/lint-rule/index.md","sourceDirName":"lint-rule","slug":"/lint-rule/","permalink":"/docs/lint-rule/","draft":false,"unlisted":false,"editUrl":"https://github.com/lintnet/lintnet.github.io/edit/main/docs/lint-rule/index.md","tags":[],"version":"current","sidebarPosition":100,"frontMatter":{"sidebar_position":100},"sidebar":"tutorialSidebar","previous":{"title":"Supported data format","permalink":"/docs/supported-data-format"},"next":{"title":"Native functions","permalink":"/docs/lint-rule/native-function"}}');var s=t(4848),l=t(8453);const a={sidebar_position:100},o="Lint rules",r={},c=[{value:"Scaffold a lint file",id:"scaffold-a-lint-file",level:2},{value:"Top level arguments",id:"top-level-arguments",level:2},{value:"Format of Jsonnet",id:"format-of-jsonnet",level:2},{value:"Conversion of <code>param.data.value</code>",id:"conversion-of-paramdatavalue",level:2},{value:"Native functions",id:"native-functions",level:2},{value:"Import Modules",id:"import-modules",level:2},{value:"Config parameter",id:"config-parameter",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"lint-rules",children:"Lint rules"})}),"\n",(0,s.jsx)(n.p,{children:"lintnet uses Jsonnet to write lint rules."}),"\n",(0,s.jsx)(n.p,{children:"e.g."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsonnet",children:"function(param) // param is a Top level arguments\n  if std.objectHas(param.data.value, 'description') then [] else [{\n    name: 'description is required',\n  }]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"scaffold-a-lint-file",children:"Scaffold a lint file"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"lintnet new [<lint file name | main.jsonnet>]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"top-level-arguments",children:"Top level arguments"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://jsonnet.org/ref/language.html#top-level-arguments-tlas",children:"Top level arguments"})," ",(0,s.jsx)(n.code,{children:"param"})," is passed to lint files."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/lintnet/lintnet/blob/main/json-schema/lint-top-level-argument.json",children:"JSON Schema of top level arguments"})}),"\n",(0,s.jsx)(n.p,{children:"e.g."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json5",children:"{\n  // A data file\n  // If the lint file name ends with _combine.jsonnet, this field is empty.\n  data: {\n    file_path: 'foo.yaml',\n    file_type: 'yaml',\n    text: '...',\n    value: {\n      // data\n    }\n  },\n\n  // A list of data files.\n  // If the lint file name ends with _combine.jsonnet, this field is set.\n  // Otherwise, this field is empty.\n  combined_data: [\n    { // same as data\n      file_path: 'foo.yaml',\n      file_type: 'yaml',\n      text: '...',\n      value: {\n        // data\n      }\n    },\n    // ...\n  ],\n  config: {}, // configuration of the lint rule\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"format-of-jsonnet",children:"Format of Jsonnet"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/lintnet/lintnet/blob/main/json-schema/lint-result.json",children:"JSON Schema"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsonnet",children:"function(param) [\n  {\n    // Only name is required. Other fields are optional.\n    name: 'rule name',\n\n    description: 'rule description',\n    message: 'error message',\n\n    // location where errors occur\n    // The format is free.\n    location: {}, // an object\n    location: '', // string is also ok\n\n    // URLs to the reference of lint rules and errors.\n    // links is either an array or an object.\n    links: [\n      'https://example.com/',\n      {\n        title: 'title',\n        link: 'https://example.com/',\n      },\n    ],\n    // links: {\n    //   '<title>': 'https://example.com/',\n    // },\n\n    level: 'error', // Error level\n    excluded: false, // If true, the element is excluded.\n    custom: {}, // An object. Users can use this field freely.\n  },\n  // ...\n]\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"conversion-of-paramdatavalue",children:["Conversion of ",(0,s.jsx)(n.code,{children:"param.data.value"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/lintnet/lintnet/pull/437",children:"#437"})}),"\n",(0,s.jsx)(n.p,{children:"lintnet parses data files and converts them to JSON.\nYAML supports non string map keys such as integer and boolean, but JSON doesn't.\nSo when lintnet converts data files to JSON, lintnet converts non string map keys to string."}),"\n",(0,s.jsx)(n.h2,{id:"native-functions",children:"Native functions"}),"\n",(0,s.jsxs)(n.p,{children:["lintnet supports some ",(0,s.jsx)(n.a,{href:"https://pkg.go.dev/github.com/google/go-jsonnet#NativeFunction",children:"native functions"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["You can executed these functions by ",(0,s.jsx)(n.code,{children:'std.native("{native function name}")'}),"."]}),"\n",(0,s.jsx)(n.p,{children:"e.g."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsonnet",children:'local contained = std.native("strings.Contains")("hello", "ll"); // true\n'})}),"\n",(0,s.jsxs)(n.p,{children:["For details, please see ",(0,s.jsx)(n.a,{href:"/docs/lint-rule/native-function",children:"Native functions"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"import-modules",children:"Import Modules"}),"\n",(0,s.jsxs)(n.p,{children:["Please see ",(0,s.jsx)(n.a,{href:"/docs/module#2-imported-module",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"config-parameter",children:"Config parameter"}),"\n",(0,s.jsxs)(n.p,{children:["Please see ",(0,s.jsx)(n.a,{href:"/docs/config",children:"here"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const s={},l=i.createContext(s);function a(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);